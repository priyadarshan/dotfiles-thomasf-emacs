#+TITLE: Thomas Frössmans gnu emacs configuration
#+AUTHOR: Thomas Frössman
#+EMAIL: thomasf@jossystem.se
#+TAGS: needsSeparation(s) needsExtraction(e)
#+TAGS: bugsIssue(b) integrationIssue(i) loadingIssue(l) clearificationIssue(c) uncertianIssue(u) deprecationIssue(d)
#+TODO: TODO WIP DONE DEPRECATED
#+LANGUAGE: en
#+PROPERTY: exports code
#+PROPERTY: no-expand
#+OPTIONS: toc:2 num:nil ^:nil
#+OPTIONS:   H:3 num:t toc:t \n:nil @:t ::t |:t ^:t -:t f:t *:t TeX:t LaTeX:nil skip:nil d:t tags:not-in-toc
#+INFOJS_OPT: view:showall toc:t ltoc:t mouse:underline buttons:0 sdepth:2 path:../org-res/org-info.js
#+STYLE:    <link rel="stylesheet" type="text/css" href="../org-res/style.css" />
#+STARTUP:indent
#+STARTUP:hidestars


* DONE Introduction
This is very very much a work in progress.

Since getting more into lisp and getting more
comfortable with the toolset I have chosen to work
with in emacs I am now re-organizing of this configuration.

Some things are not working.

* WIP Working notes
** TODO Split out larger chunks of code to the lisp/ directory
This file should mainly generate hooks and autoloads!
Everything will be much smoother this way..
** TODO Autoloads
Do manual high level autoloads.. ???
** WIP The todo states of this document

( states are considered to be inherited )

| STATE      | Usage                                                                           |
|------------+---------------------------------------------------------------------------------|
|            | No state at all is at the moment considered to be a task with a possible issue. |
| TODO       | Planned modifications                                                           |
| WIP        | Work in progress..                                                              |
| DONE       | Considered to be in good shape.                                                 |
| DEPRECATED | To be removed, possible already taken out of the loop.                          |
|------------+---------------------------------------------------------------------------------|

All headings not marked as done should have a issue tag attached to it.

** WIP Common ground packages

These packages are implemented and integrated all over this configuration.

| Library/package    | Used for                                                  |
|--------------------+-----------------------------------------------------------|
| auto-complete-mode | Providing auto complete in all modes where it makes sense |
| yasnippet          | Snippet templating                                        |
| flymake            | On the fly code validation                                |
|                    |                                                           |

* DONE Files and headers
** thomasf-bootstrap.el
Bootstrap
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
;;
;; DO NOT EDIT THIS FILE BY HAND!
;; This file is generated from thomasf-emacs.org
;;

(provide 'thomasf-bootstrap)
#+end_src

** thomasf-emacs.el
Main configuration file
#+begin_src emacs-lisp
;;
;; DO NOT EDIT THIS FILE BY HAND!
;; This file is generated from thomasf-emacs.org
;;
#+end_src

** thomasf-org.el
All orgmode configuration
#+begin_src emacs-lisp :tangle thomasf-org.el
;;
;; DO NOT EDIT THIS FILE BY HAND!
;; This file is generated from thomasf-emacs.org
;;

(provide 'thomasf-org)
#+end_src

** thomasf-gui.el
Stuff that only should load when a window system is available.

#+begin_src emacs-lisp :tangle thomasf-gui.el
;;
;; DO NOT EDIT THIS FILE BY HAND!
;; This file is generated from thomasf-emacs.org
;;

(provide 'thomasf-gui)
#+end_src

* DONE Bootstrap
** WIP Increase lisp-max-eval-depth                           :loadingIssue:
Not sure if this really helps, tangling + loading org mode seems to max out the default value...
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
  (setq max-lisp-eval-depth 1000)
#+end_src
** Turn off unwanted UI elements at once
To avoid momentary display
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
(if (fboundp 'menu-bar-mode) (menu-bar-mode -1))
(if (fboundp 'tool-bar-mode) (tool-bar-mode -1))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
#+end_src
** Less clutter and distractions on start up
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
(setq inhibit-startup-message t
      inhibit-splash-screen t
      inhibit-startup-buffer-menu t
      inhibit-startup-echo-area-message t
      initial-scratch-message ";; scratch buffer -- remember to be happy, maybe, etc. \n\n")
#+end_src
** Emacs24 version check
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
  (when (or (not (boundp 'emacs-version))
            (string< emacs-version "24.0"))
    (error (concat "emacs config requires Emacs 24.0 or later.")))
#+end_src
** Set up load paths early Provide the org-mode environment at once
Because babel should not have any chance to load from anywhere else
#+begin_src emacs-lisp :tangle thomasf-bootstrap.el
  (setq vendor-dir (concat dotfiles-dir "vendor/"))
  (setq notes-dir (file-truename "~/notes/"))

  (defun prepend-load-path-recursive (path)
    (let ((default-directory path))
      (setq load-path
            (append
             (let ((load-path (copy-sequence load-path)))
               (append
                (copy-sequence (normal-top-level-add-to-load-path '(".")))
                (normal-top-level-add-subdirs-to-load-path)))
             load-path))))

  (prepend-load-path-recursive vendor-dir)
  (prepend-load-path-recursive (concat dotfiles-dir "lisp/"))

  (setq org-modules '(org-bibtex org-docview org-id org-info org-jsinfo org-habit org-mew org-mhe org-vm org-wl org-w3m org-git-link org-velocity))
  (require 'cl)
  (require 'org-install)
#+end_src

** Load thomasf-bootstrap if it's not loaded already
If dotfiles-dir is not set, set it to the directory of
this file and add that directory to the load path.
#+begin_src emacs-lisp
  (unless (boundp 'dotfiles-dir)
    (setq dotfiles-dir (file-name-directory (or load-file-name (buffer-file-name))))
    (add-to-list 'load-path dotfiles-dir))
#+end_src

When in the thomasf-emacs.ek,
make sure that the bootstrap is loaded.
#+begin_src emacs-lisp
  (require 'thomasf-bootstrap)
#+end_src

* DONE Initialization
** Theme path
Set themes load path
#+begin_src emacs-lisp
  (setq themes-dir (concat dotfiles-dir "themes/"))
  (add-to-list 'custom-theme-load-path themes-dir)
#+end_src
** Files that should not be version controlled should gather in their own directory
#+begin_src emacs-lisp
  (setq local-data-dir (concat dotfiles-dir "localdata/"))

  (make-directory local-data-dir t)
  (defvar backup-dir (concat  local-data-dir "backups/" (user-real-login-name) "/"))
  (defvar autosave-dir (concat local-data-dir  "autosaves/" (user-login-name) "/"))
  (make-directory autosave-dir t)

  (setq save-place-file (concat local-data-dir "saveplace")
        savehist-file (concat local-data-dir "savehist")
        ac-comphist-file (concat local-data-dir "ac-comphist.dat")
        recentf-save-file (concat local-data-dir "recentf")
        bookmark-default-file (concat local-data-dir "bookmarks")
        org-clock-persist-file (concat local-data-dir "org-clock-save.el")
        org-id-locations-file (concat local-data-dir "org-id-locations")
        tramp-persistency-file-name (concat local-data-dir "tramp")
        tramp-backup-directory-alist backup-directory-alist
        backup-directory-alist (list (cons "." backup-dir))
        auto-save-file-name-transforms `((".*" ,autosave-dir t))
        custom-file (concat local-data-dir "custom-set-variables.el")
        smex-save-file (concat local-data-dir "smex-items"))
#+end_src
** Initialize package system
#+begin_src emacs-lisp
  (require 'package)
  (setq package-user-dir (concat dotfiles-dir "elpa")
        package-archives
        '(("original"    . "http://tromey.com/elpa/")
          ("gnu"         . "http://elpa.gnu.org/packages/")
          ("marmalade"   . "http://marmalade-repo.org/packages/")))
  (package-initialize)
#+end_src
** Try to load private settings and customize variables
#+begin_src emacs-lisp
  (load "~/.emacs-private" 'noerror 'nomessage)
  (load custom-file 'noerror 'nomessage)
#+end_src
** WIP Set up autoloads
These should probably generally be moved to where they are configured
#+begin_src emacs-lisp

  (autoload 'sws-mode "sws-mode" "Sws mode" t)
  (autoload 'jade-mode "jade-mode" "Jade mode" t)
  (autoload 'describe-unbound-keys "unbound" "Find unbound keys" t)
  (autoload 'zencoding-mode "zencoding-mode" "Zen coding mode" t)
  (autoload 'nyan-mode "nyan-mode" "Nyan mode" t)
  (autoload 'global-yascroll-bar-mode "yascroll" "Yascroll" t)
  (autoload 'artbollocks-mode "artbollocks-mode" "Artbollocks mode" t)

  (load "go-mode-load")

  (load "50magit")
#+end_src
** TODO Load whats always wanted                           :needsSeparation:
#+begin_src emacs-lisp
(require 'thomasf-defuns)
(require 'thomasf-org)
(if window-system (require 'thomasf-gui))
(require 'saveplace)
(require 'ffap)
(require 'uniquify)
(require 'ansi-color)
(require 'recentf)
(require 'undo-tree)
(require 'autopair)
(require 'ace-jump-mode)
(require 'sclang nil 'noerror)
(load "sv-kalender" 'noerror 'nomessage)
(smex-initialize)
;; might want to auto load these instead
;; (require 'table)
#+end_src

New stuff, to want?
#+begin_src emacs-lisp
  (require 'nav)
;;  (require 'find-file-in-project)
#+end_src

* WIP General variable configuration    :needsSeparation:clearificationIssue:

Basic variable settings should be
split from functions and stuff that
makes emacs load new stuff.

** Use UTF8 as much as possible
#+begin_src emacs-lisp
  (setq locale-coding-system 'utf-8)
  (set-terminal-coding-system 'utf-8)
  (set-keyboard-coding-system 'utf-8)
  (set-selection-coding-system 'utf-8)
  (prefer-coding-system 'utf-8)
  (set-language-environment "UTF-8")       ; prefer utf-8 for language settings
  (set-input-method nil)                   ; no funky input for normal editing;
  (setq read-quoted-char-radix 10)         ; use decimal, not octal
#+end_src

** Geographical settings
#+begin_src emacs-lisp
(setq calendar-latitude 59.3
      calendar-longitude 18.0
      calendar-location-name "Stockholm, SE")
#+end_src
** Basic editing Settings
#+begin_src emacs-lisp
(setq  next-line-add-newlines t  )
#+end_src
** TODO Misc settings
What is what?
#+begin_src emacs-lisp
  (setq vc-follow-symlinks t
        vc-handled-backends ()
        ring-bell-function 'ignore
        visible-bell nil
        column-number-mode t
        transient-mark-mode t
        shift-select-mode nil
        delete-selection-mode nil
        set-mark-even-if-inactive t
        delete-by-moving-to-trash t
        truncate-partial-width-windows nil
        uniquify-buffer-name-style 'forward
        ;; whitespace-mode
        whitespace-line-column 100
        whitespace-style '(face
                           trailing
                           lines
                           space-before-tab
                           indentation
                           space-after-tab)
        cua-enable-cua-keys nil
        ediff-window-setup-function 'ediff-setup-windows-plain
        x-select-enable-clipboard t
        interprogram-paste-function 'x-cut-buffer-or-selection-value
        browse-url-browser-function 'browse-url-generic
        browse-url-generic-program "sensible-browser"
        tramp-default-method "ssh"
        ;;anything-command-map-prefix-key "C-<f5>"
        ;;glasses-separator "␣"
        lexical-illusions nil)

  (setq-default tab-width 3
                indent-tabs-mode nil
                indicate-empty-lines nil
                imenu-auto-rescan t
                save-place t )

  (ansi-color-for-comint-mode-on)
  (auto-compression-mode t)
  (recentf-mode 1)
  (savehist-mode 1)
  (show-paren-mode 1)
  (autopair-global-mode)
  (electric-indent-mode -1)
  (electric-layout-mode t)
  (setq show-paren-style 'parenthesis)
  (cua-mode t)
  ;; init random seed
  (random t)

  (defalias 'yes-or-no-p 'y-or-n-p) ; use y/n prompts instead of yes/no

#+end_src
** Setup themes and gui stuff
#+begin_src emacs-lisp :tangle thomasf-gui.el
  (defun thomasf-solarized-childtheme ()
    "My solarized child theme"

    (custom-theme-set-faces
     theme-name
     `(show-paren-match ((,class (:foreground ,cyan-hc :background ,cyan-lc :weight bold))))

     ;; maybe...
     `(font-lock-builtin-face ((,class (:foreground ,blue :slant italic))))
     `(font-lock-comment-face ((,class (:foreground ,solarized-comments))))
     `(font-lock-comment-delimiter-face ((,class (:foreground ,solarized-comments))))
     `(font-lock-constant-face ((,class (:foreground ,blue :weight bold))))
     `(font-lock-doc-face ((,class (:foreground ,cyan :slant italic))))
     `(font-lock-doc-string-face ((,class (:foreground ,blue))))
     `(font-lock-function-name-face ((,class (:foreground ,blue))))
     `(font-lock-keyword-face ((,class (:foreground ,green :weight bold))))
     `(font-lock-negation-char-face ((,class (:foreground ,solarized-fg))))
     `(font-lock-preprocessor-face ((,class (:foreground ,blue))))
     `(font-lock-string-face ((,class (:foreground ,cyan))))
     `(font-lock-type-face ((,class (:foreground ,yellow))))
     `(font-lock-variable-name-face ((,class (:foreground ,blue))))
     `(font-lock-warning-face ((,class (:foreground ,yellow :weight bold :underline t)))))

    (custom-theme-set-variables
     theme-name
     `(org-todo-keyword-faces
       (quote (("TODO" :foreground ,red :weight bold :inverse-video t)
               ("NEXT" :foreground ,blue :weight bold :inverse-video t)
               ("DONE" :foreground ,green :weight bold)
               ("WAITING" :foreground ,orange :weight bold :inverse-video t)
               ("HOLD" :foreground ,magenta :weight bold :inverse-video t)
               ("CANCELLED" :foreground ,green :weight bold)
               ("PHONE" :foreground ,green :weight bold))))

     `(org-tag-faces
       (quote (("@home" :slant italic)
               ("@office" :slant italic)
               ("@errand" :slant italic :inverse-video t)
               ("work" :slant italic)
               ("personal" :slant italic)
               ("bulk" :foreground ,solarized-comments)
               ("hold" :foreground ,green :slant italic)
               ("note" :foreground ,magenta :slant italic)
               ("waiting" :foreground ,orange :slant italic :inverse-video t)
               ("cancelled" :foreground ,green :slant italic :slant italic)
               ("flagged" :foreground ,red :slant italic :inverse-video t))))))

  (setq day-mode-theme 'thomasf-solarized-light
        night-mode-theme 'thomasf-solarized-dark)
  (load-theme day-mode-theme)
  (setq font-lock-maximum-decoration t)
  (global-font-lock-mode t)
  (require 'pretty-mode)
  (global-pretty-mode 1)
  ;;(nyan-mode 1)
  (global-yascroll-bar-mode 1)

#+end_src

** TODO Auto-complete
Have to creae a default autocomplete conf thats better

Current:

#+begin_src emacs-lisp
  (require 'auto-complete)
  (require 'auto-complete-config)
  ;;(require 'auto-complete-yasnippet)
  (global-auto-complete-mode t)
  ;;(setq ac-auto-start nil)
  (setq ac-dwim nil) ; To get pop-ups with docs even if a word is uniquely completed
  ;; Show 0.8 second later
  (setq ac-auto-show-menu 0.8)

  ;; MOVE TO KEYB?
  (define-key ac-completing-map (kbd "C-n") 'ac-next)
  (define-key ac-completing-map (kbd "C-p") 'ac-previous)

  ;;----------------------------------------------------------------------------
  ;; Use Emacs' built-in TAB completion hooks to trigger AC (Emacs >= 23.2)
  ;;
  (setq tab-always-indent 'complete)  ;; use 'complete when auto-complete is disabled
  (add-to-list 'completion-styles 'initials t)

  ;; hook AC into completion-at-point
  (defun set-auto-complete-as-completion-at-point-function ()
    (setq completion-at-point-functions '(auto-complete)))
  (add-hook 'auto-complete-mode-hook 'set-auto-complete-as-completion-at-point-function)

  (set-default 'ac-sources
               '(ac-source-dictionary
                 ac-source-yasnippet
                 ac-source-words-in-buffer
                 ac-source-words-in-same-mode-buffers
                 ac-source-words-in-all-buffer))

  (dolist (mode '(magit-log-edit-mode log-edit-mode org-mode text-mode haml-mode
                                      sass-mode yaml-mode csv-mode espresso-mode haskell-mode
                                      html-mode nxml-mode sh-mode smarty-mode clojure-mode
                                      lisp-mode textile-mode markdown-mode tuareg-mode
                                      css-mode less-css-mode))
    (add-to-list 'ac-modes mode))

  ;; Exclude very large buffers from dabbrev
  (defun smp-dabbrev-friend-buffer (other-buffer)
    (< (buffer-size other-buffer) (* 1 1024 1024)))

  (setq dabbrev-friend-buffer-function 'smp-dabbrev-friend-buffer)
  (add-to-list 'ac-dictionary-directories (concat vendor-dir "auto-complete/dict/"))

  (ac-config-default)
  (ac-flyspell-workaround)
#+end_src

** Yasnippet
#+begin_src emacs-lisp
  (require 'dropdown-list)
  (require 'yasnippet)
  (setq yas/verbosity 0
        yas/snippet-dirs (list (concat dotfiles-dir "/snippets")
                               (concat dotfiles-dir "/snippets-imported")))
        ;;yas/prompt-functions '(yas/dropdown-prompt)

  (yas/global-mode 1)
#+end_src

** TODO Currently unused
#+begin_src emacs-lisp :tangle no
 (setq mac-option-modifier nil
       mac-command-modifier 'meta
      x-select-enable-clipboard t)

;; Trim whitespace before save)
 (add-hook 'before-save-hook 'delete-trailing-whitespace)
#+end_src

** IDO
#+begin_src emacs-lisp
  (setq  ido-enable-flex-matching t
         ido-use-filename-at-point nil
         ido-auto-merge-work-directories-length 0
         ido-use-virtual-buffers t
         ido-default-buffer-method 'selected-window)
  (ido-mode t)
  (ido-everywhere t)
  (ido-ubiquitous-mode)
#+end_src
* WIP Common configuration
** Flymake
#+begin_src emacs-lisp
  (eval-after-load "flymake"
    '(progn
       (require 'flymake-cursor)))
#+end_src
* WIP Utility functions                                     :needsExtraction:
** DONE Insert csv as org table at point
#+begin_src emacs-lisp :tangle thomasf-org.el
  (defun insert-file-as-org-table (filename)
    "Insert a file into the current buffer at point, and convert it to an org table."
    (interactive (list (ido-read-file-name "csv file: ")))
    (let* ((start (point))
           (end (+ start (nth 1 (insert-file-contents filename)))))
      (org-table-convert-region start end)))
#+end_src
* Modes, modules and hooks
** Generic hooks
*** All modes hook
#+begin_src emacs-lisp
  (defun thomasf-all-modes-hook ()
    "Hook that should be run every time an major mode is entered"
    (turn-on-undo-tree-mode))

  (add-hook 'after-change-major-mode-hook  'thomasf-all-modes-hook)
#+end_src
*** Text mode hook
#+begin_src emacs-lisp
  (defun thomasf-textmode-hook ()
    ;;(table-recognize)
    ;;(turn-on-auto-fill)
    (turn-on-undo-tree-mode))

  (add-hook 'text-mode-hook 'thomasf-textmode-hook)
#+end_src
*** Programming hook
#+begin_src emacs-lisp
  (defun thomasf-programming-hook ()
    "Enable things that are convenient across all programming buffers."
    (set (make-local-variable 'comment-auto-fill-only-comments) t)
    (make-local-variable 'column-number-mode)
    (undo-tree-mode)
    (setq save-place t)
    (if window-system (hl-line-mode +1)))
#+end_src
** Programming languages
*** DEPRECATED Erlang
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.erl$" . erlang-mode))
  (add-to-list 'auto-mode-alist '("\\.hrl$" . erlang-mode))

  (defun thomasf-erlang-hook ()
    (thomasf-programming-hook))
#+end_src
*** DONE Haskell
#+begin_src emacs-lisp
  (autoload 'haskell-align-imports "haskell-align-imports" "haskell-align-imports" t)
  (autoload 'haskell-navigate-imports "haskell-navigate-imports" "haskell-navigate-imports" t)
  (autoload 'haskell-sort-imports "haskell-sort-imports" "haskell-sort-imports" t)
  (load "haskell-site-file")

  (defun thomasf-haskell-mode-hook ()
    "My haskell-mode hook"
    (thomasf-programming-hook)
    (turn-on-haskell-doc-mode)
    (turn-on-haskell-indentation)
    (if window-system (rainbow-delimiters-mode))
    (eldoc-mode))

  (add-hook 'haskell-mode-hook 'thomasf-haskell-mode-hook)
#+end_src
*** CoffeeScript
#+begin_src emacs-lisp
      (autoload 'coffee-mode "coffee-mode" "Coffee Mode." t)

      (add-to-list 'auto-mode-alist '("\\.coffee$" . coffee-mode))
      (add-to-list 'auto-mode-alist '("Cakefile" . coffee-mode))

      (setq coffee-cleanup-whitespace nil
            coffee-debug-mode t
            coffee-tab-width 2)

      (defun thomasf-coffee-mode-hook ()
        "My coffee-mode hook"
        (thomasf-programming-hook)

        (setq ac-sources
              '(ac-source-imenu
                ;; ac-source-dictionary
                ;; ac-source-yasnippet
                ac-source-words-in-buffer
                ac-source-words-in-same-mode-buffers
                ;;ac-source-words-in-all-buffer
                ))
        (electric-indent-mode -1)
        (electric-layout-mode -1)
        (whitespace-mode 1)
        ;;(glasses-mode 1)
        (flymake-coffee-load)
        (auto-complete-mode))

      (add-hook 'coffee-mode-hook 'thomasf-coffee-mode-hook)
#+end_src
*** JavaScript
#+begin_src emacs-lisp
  (font-lock-add-keywords
   'js-mode `(("\\(function *\\)("
               (0 (progn (compose-region (match-beginning 1) (match-end 1)
                                         "ƒ")
                         nil)))))

  (font-lock-add-keywords 'js-mode
                          '(("\\<\\(FIX\\|TODO\\|FIXME\\|HACK\\|REFACTOR\\):"
                             1 font-lock-warning-face t)))

  (add-to-list 'auto-mode-alist '("\\.json$" . js-mode))
  (setq js-indent-level 2)

  (defun thomasf-js-mode-hook ()
    "My js-mode hook"
    ;; electric-layout-mode doesn't play nice with js-mode
    (thomasf-programming-hook)
    (electric-layout-mode -1))

  (add-hook 'js-mode-hook 'thomasf-js-mode-hook)
#+end_src

JSON

#+begin_src emacs-lisp
  (autoload 'json-mode "json-mode" "json-mode" t)
  (autoload 'flymake-jsonlint-load "flymake-jsonlint" "JSONlint flymake" t)
  (add-to-list 'auto-mode-alist '("\\.json$" . json-mode))

  (defun thomasf-json-mode-hook ()
    (thomasf-programming-hook)
    (flymake-jsonlint-load))

  (add-hook 'json-mode-hook 'thomasf-json-mode-hook)
#+end_src

*** lisp
- Should all lisp modes be in the same place?
Most of this is just copied without ever read

Disable slime for now
#+begin_src emacs-lisp :tangle no
  (require 'slime)
  (require 'geiser)
  (setq geiser-scheme-dir "/usr/local/share/geiser")

  (eval-after-load "slime"
    '(progn
       (setq slime-lisp-implementations '((sbcl ("sbcl"))))
       (slime-setup '(slime-asdf
                      slime-autodoc
                      slime-editing-commands
                      slime-fancy-inspector
                      slime-fontifying-fu
                      slime-fuzzy
                      slime-indentation
                      slime-mdot-fu
                      slime-package-fu
                      slime-references
                      slime-repl
                      slime-sbcl-exts
                      slime-scratch
                      slime-xref-browser))
       (slime-autodoc-mode)
       (setq slime-complete-symbol*-fancy t
             slime-complete-sumbol-function 'slime-fuzzy-complete-symbol)))
#+end_src


#+begin_src emacs-lisp
  (add-hook 'emacs-lisp-mode-hook 'eldoc-mode)
  (add-hook 'emacs-lisp-mode-hook 'thomasf-programming-hook)
  (add-hook 'lisp-mode-hook 'thomasf-programming-hook)

  (add-hook 'emacs-lisp-mode-hook 'emacs-lisp-remove-elc-on-save)
  (add-hook 'emacs-lisp-mode-hook '(lambda () "rainbown-delimiters" (rainbow-delimiters-mode)))

  ;;  (when (functionp 'paredit-mode)
  ;;    (add-hook 'emacs-lisp-mode-hook (lambda () (paredit-mode +1)))
  ;;    (add-hook 'lisp-mode-hook (lambda () (paredit-mode +1))))

  (defun emacs-lisp-remove-elc-on-save ()
    "If you're saving an elisp file, likely the .elc is no longer valid."
    (make-local-variable 'after-save-hook)
    (add-hook 'after-save-hook
              (lambda ()
                (if (file-exists-p (concat buffer-file-name "c"))
                    (delete-file (concat buffer-file-name "c"))))))

  (define-key lisp-mode-shared-map (kbd "C-c l") "lambda")
  (define-key read-expression-map (kbd "TAB") 'lisp-complete-symbol)
  (define-key lisp-mode-shared-map (kbd "RET") 'reindent-then-newline-and-indent)
  (define-key lisp-mode-shared-map (kbd "C-\\") 'lisp-complete-symbol)
  (define-key lisp-mode-shared-map (kbd "C-c v") 'eval-buffer)

  (autoload 'scheme-get-current-symbol-info "scheme-complete" nil t)
  (add-hook 'scheme-mode-hook
            (lambda ()
              (make-local-variable 'eldoc-documentation-function)
              (setq eldoc-documentation-function 'scheme-get-current-symbol-info)
              (eldoc-mode)))

#+end_src
*** PHP
#+begin_src emacs-lisp
  (autoload 'php-mode "php-mode" "PHP Mode." t)

  (add-to-list 'auto-mode-alist '("\\.php$" . php-mode))

  (defun thomasf-php-mode-hook ()
    "My php mode hook"
    (thomasf-programming-hook)
    (flymake-php-load))

  (add-hook 'php-mode-hook 'thomasf-php-mode-hook)

#+end_src
*** Python
#+begin_src emacs-lisp
  ;;(require 'python-mode)
  (add-to-list 'auto-mode-alist '("\\.py\\'" . python-mode))
  (add-to-list 'interpreter-mode-alist '("python" . python-mode))

  ;; if ipythonm use ipython
  ;;(when (executable-find "ipython")
  ;;(require 'ipython)
  ;;(setq org-babel-python-mode 'python-mode))

  (defun thomasf-python-mode-hook ()
    (thomasf-programming-hook)
    (electric-indent-mode -1)
    (require 'ac-python)
    (setq ac-sources '(ac-source-yasnippet))
    (whitespace-mode))

  (add-hook 'python-mode-hook 'thomasf-python-mode-hook)
#+end_src

#+begin_src emacs-lisp
  (eval-after-load "flymake"
    '(progn
       (defun flymake-pylint-init (&optional trigger-type)
         (let* ((temp-file (flymake-init-create-temp-buffer-copy
                            'flymake-create-temp-with-folder-structure))
                (local-file (file-relative-name
                             temp-file
                             (file-name-directory buffer-file-name)))
                (options (when trigger-type (list "--trigger-type" trigger-type))))
           (list  (concat vendor-dir "flymake-python/pyflymake.py") (append options (list local-file)))))

       (add-to-list 'flymake-allowed-file-name-masks
                    '("\\.py\\'" flymake-pylint-init))))

#+end_src
*** Ruby
#+begin_src emacs-lisp
  (autoload 'ruby-block-mode "ruby-block" "Ruby block mode" t)

  (add-to-list 'auto-mode-alist '("\\.rake$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Rakefile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.gemspec$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("\\.ru$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Gemfile$" . ruby-mode))
  (add-to-list 'auto-mode-alist '("Guardfile$" . ruby-mode))
  (add-to-list 'completion-ignored-extensions ".rbc")

  (defun thomasf-ruby-hook ()
    "My ruby hook"
    (thomasf-programming-hook)
    (ruby-block-mode t)
    (setq ac-sources '(ac-source-imenu ac-source-yasnippet ac-source-words-in-buffer)))

  (add-hook 'ruby-mode-hook 'thomasf-ruby-hook)
#+end_src

*** Java
#+begin_src emacs-lisp
  (eval-after-load  "java-mode"
    '(progn
       (setq eclim-eclipse-dirs "~/programming/applib/eclim_eclipse")
       (require 'eclim)))
#+end_src
** Markup/text languages
*** DEPRECATED Multi web mode
Does not work very well..

#+begin_src emacs-lisp
  (autoload 'multi-web-mode "multi-web-mode" "Multi web mode" t)
#+end_src

#+begin_src emacs-lisp :tangle no
  (require 'multi-web-mode)
  (setq mweb-default-major-mode 'html-mode)
  (setq mweb-tags '((php-mode "<\\?php\\|<\\? \\|<\\?=" "\\?>")
                    (js-mode "<script +\\(type=\"text/javascript\"\\|language=\"javascript\"\\)[^>]*>" "</script>")
                    (css-mode "<style +type=\"text/css\"[^>]*>" "</style>")))
  ;; (setq mweb-filename-extensions '("php" "htm" "html" "ctp" "phtml" "php4" "php5"))
  (setq mweb-filename-extensions '("php" "php4" "php5"))
  (multi-web-global-mode 1)
#+end_src

*** CSS
#+begin_src emacs-lisp
  (defun thomasf-css-mode-hook ()
    "My css-mode hook"
    (thomasf-programming-hook)
    (if window-system (rainbow-mode)))

  (add-hook 'css-mode-hook 'thomasf-css-mode-hook)
  (setq css-indent-offset 3)

  (add-to-list 'auto-mode-alist '("\\.css$" . css-mode))
#+end_src

*** Stylus
#+begin_src emacs-lisp
  (autoload 'stylus-mode "stylus-mode" "Stylus mode" t)
  (add-to-list 'auto-mode-alist '("\\.styl$" . stylus-mode))

  (defun thomasf-stylus-mode-hook ()
    "My stylus mode hook"
    (thomasf-programming-hook)
    (if window-system (rainbow-mode))
    (auto-complete-mode))

  (add-hook 'stylus-mode-hook 'thomasf-stylus-mode-hook)
#+end_src

*** Markdown
#+begin_src emacs-lisp
  (autoload 'markdown-mode "markdown-mode" "Markdown mode" t)

  (add-to-list 'auto-mode-alist '("\\.markdown$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.md$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mdwn$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mkd$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mkdown$" . markdown-mode))
  (add-to-list 'auto-mode-alist '("\\.mdtext$" . markdown-mode))

  (defun thomasf-markdown-mode-hook ()
    "My markdown-mode hook"
    (setq markdown-command "pandoc -f markdown -t html")
    (define-key markdown-mode-map (kbd "<tab>") nil)
    ;(turn-on-auto-fill)
    (undo-tree-mode)
    (artbollocks-mode))

  (add-hook 'markdown-mode-hook 'thomasf-markdown-mode-hook)
#+end_src
*** HTML
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.html$" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.rhtml$" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.mustache$" . html-mode))
  (add-to-list 'auto-mode-alist '("\\.hb$" . html-mode))

  (defun thomasf-html-mode-hook ()
    "My html-mode-hook"
    (thomasf-programming-hook)
    (zencoding-mode)
    (setq ac-sources '(ac-source-yasnippet)))

  (add-hook 'html-mode-hook 'thomasf-html-mode-hook)
#+end_src

*** YAML
#+begin_src emacs-lisp
  (add-to-list 'auto-mode-alist '("\\.yml$" . yaml-mode))
#+end_src
** Other modes
*** Gitolite configuration files
#+begin_src emacs-lisp
  (require 'gl-conf-mode)
  (add-to-list 'auto-mode-alist '("gitolite\\.conf\\'" . gl-conf-mode))

#+end_src
*** Git commit mode
#+begin_src emacs-lisp
  (require 'git-commit)
  (add-hook 'git-commit-mode-hook 'turn-on-flyspell)
  (add-hook 'git-commit-mode-hook (lambda () (toggle-save-place 0)))
#+end_src
*** GNUS
#+begin_src emacs-lisp
  ;; Make Gnus NOT ignore [Gmail] mailboxes
  (setq gnus-ignored-newsgroups "^to\\.\\|^[0-9. ]+\\( \\|$\\)\\|^[\"]\"[#'()]")
#+end_src

* TODO org-mode
** TODO Orgmode
!VERY MUCH STILL WIP!
Inspirations:
- http://orgmode
- http://doc.norang.ca/org-mode.html

** Set up basic paths for org and org-agenda
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-directory notes-dir
        org-agenda-files (file-expand-wildcards (concat notes-dir "agenda/*.org"))
        org-agenda-text-search-extra-files (file-expand-wildcards (concat notes-dir "org/*.org"))
        org-default-notes-file (concat notes-dir "agenda/refile.org")
        org-mobile-inbox-for-pull (concat notes-dir "from-mobile.org"))
#+end_src
** Settings
*** Misc
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-use-fast-todo-selection t
        org-treat-S-cursor-todo-selection-as-state-change nil
        org-startup-indented t
        ;; org-log-done t
        org-ellipsis "…"
        org-columns-ellipses "…"
        org-startup-with-inline-images t
        org-outline-path-complete-in-steps t
        org-tab-follows-link t
        org-completion-use-ido t)
#+end_src
*** Agenda
**** Misc
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-agenda-span 10
        org-agenda-show-all-dates nil
        org-agenda-dim-blocked-tasks nil
        org-agenda-tags-todo-honor-ignore-options t)
#+end_src
**** icalendar export
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-icalendar-include-body t
        org-icalendar-include-sexps t
        org-icalendar-store-UID t
        org-icalendar-include-todo t
        org-icalendar-use-scheduled '(todo-due event-if-todo event-if-not-todo)
        org-icalendar-use-deadline '(todo-due event-if-todo event-if-not-todo)
        org-icalendar-alarm-time 240)
#+end_src

*** Refile
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-refile-targets (quote ((org-agenda-files :level . 2)))
        org-refile-use-outline-path (quote file))
#+end_src
*** Todo
**** Default todo states
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-todo-keywords
        (quote ((sequence "TODO(t)" "NEXT(n)" "|" "DONE(d!/!)")
                (sequence "WAITING(w@/!)" "HOLD(h@/!)" "|" "CANCELLED(c@/!)" "PHONE"))))
#+end_src
**** Todo state triggers
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-todo-state-tags-triggers
        (quote (("CANCELLED" ("cancelled" . t))
                ("WAITING" ("waiting" . t))
                ("HOLD" ("waiting" . t) ("hold" . t))
                (done ("waiting") ("hold"))
                ("TODO" ("waiting") ("cancelled") ("hold"))
                ("NEXT" ("waiting") ("cancelled") ("hold"))
                ("DONE" ("waiting") ("cancelled") ("hold")))))
#+end_src
*** Default tags
#+begin_src emacs-lisp :tangle thomasf-org.el
  ; Tags with fast selection keys
  (setq org-tag-alist (quote ((:startgroup)
                              ("@errand" . ?e)
                              ("@office" . ?o)
                              ("@home" . ?H)
                              (:endgroup)
                              ("phone" . ?p)
                              ("waiting" . ?w)
                              ("hold" . ?h)
                              ("personal" . ?P)
                              ("work" . ?W)
                              ("note" . ?n)
                              ("cancelled" . ?c)
                              ("flagged" . ??))))

#+end_src
*** Capture templates
#+begin_src emacs-lisp :tangle thomasf-org.el
  ;; Capture templates for: TODO tasks, Notes, appointments, phone calls, and org-protocol
  (setq org-capture-templates
        (quote (("t" "todo" entry (file org-default-notes-file)
                 "* TODO %?\n%U\n%a\n  %i" :clock-in t :clock-resume t)
                ("n" "note" entry (file org-default-notes-file)
                 "* %? :note:\n%U\n%a\n  %i" :clock-in t :clock-resume t)
                ("j" "Journal" entry (file+datetree (concat notes-dir "org/diary.org"))
                 "* %?\n%U\n  %i" :clock-in t :clock-resume t)
                ("w" "org-protocol" entry (file org-default-notes-file)
                 "* TODO Review %c\n%U\n  %i" :immediate-finish t)
                ("p" "Phone call" entry (file org-default-notes-file)
                 "* PHONE %? :phone:\n%U" :clock-in t :clock-resume t)
                ("h" "Habit" entry (file org-default-notes-file)
                 "* NEXT %?\n%U\n%a\nSCHEDULED: %t .+1d/3d\n:PROPERTIES:\n:STYLE: habit\n:REPEAT_TO_STATE: NEXT\n:END:\n  %i"))))
#+end_src
*** Clocking
#+begin_src emacs-lisp :tangle thomasf-org.el
  ;;Resume clock when the agenda is loaded
  (eval-after-load "org-agenda"
    '(progn
       (org-clock-persistence-insinuate)))
  ;; Clocking
  ;;
  ;; Resume clocking task when emacs is restarted

  ;;
  ;; Show lot sof clocking history so it's easy to pick items off the C-F11 list
  (setq org-clock-history-length 36)
  ;; Resume clocking task on clock-in if the clock is open
  (setq org-clock-in-resume t)
  ;; Change tasks to NEXT when clocking in
  ;;(setq org-clock-in-switch-to-state 'bh/clock-in-to-next)
  ;; Separate drawers for clocking and logs
  (setq org-drawers (quote ("PROPERTIES" "LOGBOOK")))
  ;; Save clock data and state changes and notes in the LOGBOOK drawer
  (setq org-clock-into-drawer t)
  ;; Sometimes I change tasks I'm clocking quickly - this removes clocked tasks with 0:00 duration
  (setq org-clock-out-remove-zero-time-clocks t)
  ;; Clock out when moving task to a done state
  (setq org-clock-out-when-done t)
  ;; Save the running clock and all clock history when exiting Emacs, load it on startup
  (setq org-clock-persist t)
  ;; Do not prompt to resume an active clock
  (setq org-clock-persist-query-resume nil)
  ;; Enable auto clock resolution for finding open clocks
  (setq org-clock-auto-clock-resolution (quote when-no-clock-is-running))
  ;; Include current clocking task in clock reports
  (setq org-clock-report-include-clocking-task t)
#+end_src
** Integrations
*** TODO yasnippet
#+begin_src emacs-lisp :tangle no
  (defun yas/org-very-safe-expand ()
    (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

  (add-hook 'org-mode-hook
            (lambda ()
              (make-variable-buffer-local 'yas/trigger-key)
              (setq yas/trigger-key [tab])
              (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
              (define-key yas/keymap [tab] 'yas/next-field)))
#+end_src
** Babel configuration
*** TODO Always execute code blocks in these languages in babel mode
#+begin_src emacs-lisp :tangle thomasf-org.el
  (eval-after-load "org"
    '(progn
       (org-babel-do-load-languages
        'org-babel-load-languages
        '((perl . t)
          (ruby . t)
          (sh . t)
          (python . t)
          (emacs-lisp . t)))))
#+end_src

*** Configure babel execution!
#+begin_src emacs-lisp :tangle thomasf-org.el
  (setq org-confirm-babel-evaluate nil
        org-export-babel-evaluate nil)
#+end_src
** Support functions
#+begin_src emacs-lisp :tangle thomasf-org.el
  (defun open-index-notes ()
    "Open my index personal org-wiki-whatever index file"
    (interactive)
    (find-file-read-only "~/notes/index.org"))
#+end_src
** MAJOR block'o'code

#+begin_src emacs-lisp :tangle thomasf-org.el

  ;; (define-key mode-specific-map [?a] 'org-agenda)

  ;; (eval-after-load "org"
  ;;   '(progn
  ;;      (define-prefix-command 'org-todo-state-map)
  ;;      (define-key org-mode-map "\C-cx" 'org-todo-state-map)

  ;;      (define-key org-todo-state-map "x"
  ;;        #'(lambda nil (interactive) (org-todo "CANCELLED")))
  ;;      )
  ;;   )


  ;; Allow setting single tags without the menu
  ;; (setq org-fast-tag-selection-single-key (quote expert))

  ;; DIsable orgmode default stuck projects ist
  (setq org-stuck-projects (quote ("" nil nil "")))

  ;; enable flyspell for all org-mode buffers
  ;;(add-hook 'org-mode-hook 'turn-on-flyspell 'append)
  ;; enable auto revert for all org-mode buffers
  ;;(add-hook 'org-mode-hook 'turn-on-auto-revert-mode 'append)

  ;; Disable default key bindings for include/remove from org agenda
  (add-hook 'org-mode-hook
            (lambda ()
              (org-defkey org-mode-map "\C-c[" 'undefined)
              (org-defkey org-mode-map "\C-c]" 'undefined)))

  ;; Make windmove work in org-mode:
  (add-hook 'org-shiftup-final-hook 'windmove-up)
  (add-hook 'org-shiftleft-final-hook 'windmove-left)
  (add-hook 'org-shiftdown-final-hook 'windmove-down)
  (add-hook 'org-shiftright-final-hook 'windmove-right)


  ;; support functions


#+end_src

** TODO clocking
leaving this untangeled for now, not sure if I even want clocking at all
#+begin_src emacs-lisp :tangle no
  (setq bh/keep-clock-running nil)

  (defun bh/clock-in-to-next (kw)
    "Switch a task from TODO to NEXT when clocking in.
  Skips capture tasks, projects, and subprojects.
  Switch projects and subprojects from NEXT back to TODO"
    (when (not (and (boundp 'org-capture-mode) org-capture-mode))
      (cond
       ((and (member (org-get-todo-state) (list "TODO"))
             (bh/is-task-p))
        "NEXT")
       ((and (member (org-get-todo-state) (list "NEXT"))
             (bh/is-project-p))
        "TODO"))))


  (defun bh/punch-in (arg)
    "Start continuous clocking and set the default task to the
  selected task.  If no task is selected set the Organization task
  as the default task."
    (interactive "p")
    (setq bh/keep-clock-running t)
    (if (equal major-mode 'org-agenda-mode)
        ;;
        ;; We're in the agenda
        ;;
        (let* ((marker (org-get-at-bol 'org-hd-marker))
               (tags (org-with-point-at marker (org-get-tags-at))))
          (if (and (eq arg 4) tags)
              (org-agenda-clock-in '(16))
            (bh/clock-in-organization-task-as-default)))
      ;;
      ;; We are not in the agenda
      ;;
      (save-restriction
        (widen)
                                          ; Find the tags on the current task
        (if (and (equal major-mode 'org-mode) (not (org-before-first-heading-p)) (eq arg 4))
            (org-clock-in '(16))
          (bh/clock-in-organization-task-as-default)))))

  (defun bh/punch-out ()
    (interactive)
    (setq bh/keep-clock-running nil)
    (when (org-clock-is-active)
      (org-clock-out))
    (org-agenda-remove-restriction-lock))

  (defun bh/clock-in-default-task ()
    (save-excursion
      (org-with-point-at org-clock-default-task
        (org-clock-in))))

  (defun bh/clock-in-parent-task ()
    "Move point to the parent (project) task if any and clock in"
    (let ((parent-task))
      (save-excursion
        (save-restriction
          (widen)
          (while (and (not parent-task) (org-up-heading-safe))
            (when (member (nth 2 (org-heading-components)) org-todo-keywords-1)
              (setq parent-task (point))))
          (if parent-task
              (org-with-point-at parent-task
                (org-clock-in))
            (when bh/keep-clock-running
              (bh/clock-in-default-task)))))))

  (defvar bh/organization-task-id "eb155a82-92b2-4f25-a3c6-0304591af2f9")

  (defun bh/clock-in-organization-task-as-default ()
    (interactive)
    (org-with-point-at (org-id-find bh/organization-task-id 'marker)
      (org-clock-in '(16))))

  (defun bh/clock-out-maybe ()
    (when (and bh/keep-clock-running
               (not org-clock-clocking-in)
               (marker-buffer org-clock-default-task)
               (not org-clock-resolving-clocks-due-to-idleness))
      (bh/clock-in-parent-task)))

  (add-hook 'org-clock-out-hook 'bh/clock-out-maybe 'append)
#+end_src



** SET UP ORG MODE LOADING!!!
#+begin_src emacs-lisp
  (eval-after-load "org-agenda"
    '(progn
       (require 'thomasf-org-agenda)))

#+end_src


* Key bindings
** Global
*** Unbind keys
This is very specific to how and what I do to my caps-lock key.
#+begin_src emacs-lisp
  (define-key special-event-map (kbd "<key-17>") 'ignore)
  (define-key special-event-map (kbd "<M-key-17>") 'ignore)
#+end_src
*** Common
#+begin_src emacs-lisp
  (global-set-key (kbd "<C-f1>") 'open-index-notes)
  (global-set-key [f1] 'eshell)
  (global-set-key [f2] 'split-window-horizontally)
  (global-set-key [f3] 'split-window-vertically)
  (global-set-key [f4] 'delete-window)
  ;;(global-set-key [f5] 'anything)
  (global-set-key [f5] 'find-file-in-project)
  (global-set-key [f6] 'multi-occur-in-this-mode)
  (global-set-key [f7] 'cycle-ispell-languages)

  (global-set-key [f8] 'org-search-view)
  (global-set-key [f12] 'menu-bar-mode)
  (define-key global-map (kbd "C-c SPC") 'ace-jump-mode)
#+end_src

#+begin_src emacs-lisp :tangle thomasf-gui.el
  (global-set-key [f11] 'toggle-night-mode)
#+end_src

*** Window navigation
#+begin_src emacs-lisp
  (windmove-default-keybindings)
#+end_src
*** Window resizing
#+begin_src emacs-lisp
  (global-set-key (kbd "S-C-<left>")   'shrink-window-horizontally)
  (global-set-key (kbd "S-C-<right>")  'enlarge-window-horizontally)
  (global-set-key (kbd "S-C-<down>")   'shrink-window)
  (global-set-key (kbd "S-C-<up>")     'enlarge-window)
#+end_src
*** Searching
#+begin_src emacs-lisp
  (global-set-key (kbd "C-s")      'isearch-forward-regexp)
  (global-set-key (kbd "C-r")      'isearch-backward-regexp)
  (global-set-key (kbd "C-M-s")    'isearch-forward)
  (global-set-key (kbd "C-M-r")    'isearch-backward)
  ; This navigates search results and error
  (global-set-key (kbd "<M-prior>") 'previous-error)
  (global-set-key (kbd "<M-next>")  'next-error)
#+end_src
*** TODO Proper delete functionality
#+begin_src emacs-lisp :tangle no
  (global-set-key (kbd "<backspace>") 'backward-kill-word)
  (global-set-key (kbd "C-<backspace>") 'backward-delete-char)
#+end_src

*** Replace basic emacs functionality

#+begin_src emacs-lisp
  (global-set-key (kbd "M-x") 'smex)
  (global-set-key (kbd "M-X") 'smex-major-mode-commands)
  ;; This is your old M-x.
  (global-set-key (kbd "C-c C-c M-x") 'execute-extended-command)
#+end_src

#+begin_src emacs-lisp :tangle thomasf-gui.el
  (global-set-key "\C-x\C-c" 'intelligent-close)
#+end_src

*** Isearch opccur
#+begin_src emacs-lisp
  (define-key isearch-mode-map (kbd "C-o") 'isearch-occur)
#+end_src

** org-mode
#+begin_src emacs-lisp :tangle thomasf-org.el
  (define-key global-map "\C-cl" 'org-store-link)
  (define-key global-map "\C-ca" 'org-agenda)
  (global-set-key (kbd "C-M-r") 'org-capture)
#+end_src
